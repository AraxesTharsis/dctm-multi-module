#Description of how the build system works

= Introduction =

In an ideal world Documentum development would follow the same pattern as mainstream Enterprise Java development practices where tools such as Maven have become popular in standardising and (arguably) simplifying build and deployment processes. [http://martinfowler.com/articles/continuousIntegration.html Continuous Integration] has also helped in fostering good build practices.

..but Documentum development has always been different ;-/

This project is an experiment in making Documentum development a bit more mainstream.

= Tools for the Job =
  * [http://nexus.sonatype.org Nexus Maven Repository Manager]
  * [http://tomcat.apache.org Apache Tomcat]
  * [http://ant.apache.org Apache Ant]
  * [http://maven.apache.org Apache Maven]
  * [http://maven.apache.org/ant-tasks Maven Ant Tasks]
  * [http://www.documentum.com Documentum Composer]


= Approach to Development =
Using the setup described in this project it should be possible for developers to work in the following way:

  * checkout source code from source code repository (e.g. Subversion)
  * run `mvn eclipse:eclipse` or `mvn idea:idea` to create IDE project files
  * import projects in IDE
  * use IDE support for Ant to compile, run JUnit tests, etc
  * commit source code to source code repository
  * build server triggers build job from code commit
  * build job generates compiles code, runs JUnit tests, creates JAR, WAR and DAR artifacts
  * build job deploys JAR, WAR and DAR artifacts to Maven repository
  * build job optionally deploys DAR artifacts to Documentum repository
